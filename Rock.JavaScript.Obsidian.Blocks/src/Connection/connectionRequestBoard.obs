<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <NotificationBox v-if="blockErrorMessage" :alertType="AlertType.Warning">
        {{ blockErrorMessage }}
    </NotificationBox>

    <Panel v-if="!blockErrorMessage"
           type="block"
           :title="panelTitle"
           :class="panelCssClass"
           :hasFullscreen="true"
           :headerSecondaryActions="secondaryActions">

        <template #headerActions>
            <span class="action">
                <i class="fa fa-star-o"></i>
            </span>

            <span class="action">
                <i class="fa fa-list"></i>
            </span>

            <span class="action">
                <i class="fa fa-plus-square"></i>
            </span>
        </template>

        <template #preBody>
            <Toolbar :connectionTypes="connectionTypes"
                     :filterOptions="filterOptions"
                     :filters="filters"
                     :disabled="isBoardDisabled"
                     @opportunityChanged="onOpportunityChanged"
                     @filtersChanged="onFiltersChanged" />
        </template>

        <!-- Body -->
        <div v-if="showPanelBodyAlert" class="panel-body-alert">

            <NotificationBox v-if="!connectionOpportunity" :alertType="AlertType.Info">
                Please select a connection opportunity.
            </NotificationBox>

            <NotificationBox v-if="blockActionErrorMessage" :alertType="AlertType.Warning">
                {{ blockActionErrorMessage }}
            </NotificationBox>

        </div>

        <CardView />

    </Panel>
</template>

<script setup lang="ts">
    import { computed, ref, watch } from "vue";
    import CardView from "./ConnectionRequestBoard/cardView.partial.obs";
    import GridView from "./ConnectionRequestBoard/gridView.partial.obs";
    import Toolbar from "./ConnectionRequestBoard/toolbar.partial.obs";
    import { PageParameterKey } from "./ConnectionRequestBoard/types.partial";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import Panel from "@Obsidian/Controls/panel.obs";
    import { AlertType } from "@Obsidian/Enums/Controls/alertType";
    import { PanelAction } from "@Obsidian/Types/Controls/panelAction";
    import { onConfigurationValuesChanged, useConfigurationValues, useInvokeBlockAction, useReloadBlock } from "@Obsidian/Utility/block";
    import { ConnectionRequestBoardConnectionOpportunityBag } from "@Obsidian/ViewModels/Blocks/Connection/ConnectionRequestBoard/connectionRequestBoardConnectionOpportunityBag";
    import { ConnectionRequestBoardConnectionTypeBag } from "@Obsidian/ViewModels/Blocks/Connection/ConnectionRequestBoard/connectionRequestBoardConnectionTypeBag";
    import { ConnectionRequestBoardFilterOptionsBag } from "@Obsidian/ViewModels/Blocks/Connection/ConnectionRequestBoard/connectionRequestBoardFilterOptionsBag";
    import { ConnectionRequestBoardFiltersBag } from "@Obsidian/ViewModels/Blocks/Connection/ConnectionRequestBoard/connectionRequestBoardFiltersBag";
    import { ConnectionRequestBoardInitializationBox } from "@Obsidian/ViewModels/Blocks/Connection/ConnectionRequestBoard/connectionRequestBoardInitializationBox";
    import { ConnectionRequestBoardSelectedOpportunityBag } from "@Obsidian/ViewModels/Blocks/Connection/ConnectionRequestBoard/connectionRequestBoardSelectedOpportunityBag";

    const config = useConfigurationValues<ConnectionRequestBoardInitializationBox>();
    const invokeBlockAction = useInvokeBlockAction();
    const reloadBlock = useReloadBlock();

    const secondaryActions: PanelAction[] = [
        {
            title: "Campaign Requests",
            iconCssClass: "fas fa-user-plus",
            type: "default",
            handler: () => alert("Campaign Requests selected.")
        }
    ];

    // #region Values

    const connectionTypes = ref<ConnectionRequestBoardConnectionTypeBag[] | null | undefined>(config.connectionTypes);
    const selectedOpportunity = ref<ConnectionRequestBoardSelectedOpportunityBag | null | undefined>(config.selectedOpportunity);

    const blockActionErrorMessage = ref("");
    const isSelectingOpportunity = ref(false);

    // #endregion

    // #region Computed Values

    const blockErrorMessage = computed((): string | undefined | null => {
        return config.errorMessage;
    });

    const panelCssClass = computed((): string => {
        let cssClass = "styled-scroll";

        // if (isBoardView) {
        cssClass = `${cssClass} connection-board-view`;
        // }

        return cssClass;
    });

    const connectionRequestId = computed((): number | null | undefined => {
        return selectedOpportunity.value?.connectionRequestId;
    });

    const connectionOpportunity = computed((): ConnectionRequestBoardConnectionOpportunityBag | null | undefined => {
        return selectedOpportunity.value?.connectionOpportunity;
    });

    const connectionOpportunityId = computed((): number | null | undefined => {
        return connectionOpportunity.value?.id;
    });

    const panelTitle = computed((): string => {
        return connectionOpportunity.value?.publicName ?? "";
    });

    const filterOptions = computed((): ConnectionRequestBoardFilterOptionsBag | null | undefined => {
        return selectedOpportunity.value?.filterOptions;
    });

    const filters = computed((): ConnectionRequestBoardFiltersBag | null | undefined => {
        return selectedOpportunity.value?.filters;
    });

    const campusId = computed((): number | null | undefined => {
        return filters.value?.campusId;
    });

    const showPanelBodyAlert = computed((): boolean => {
        return !connectionOpportunity.value
            || !!blockActionErrorMessage.value;
    });

    const isBoardDisabled = computed((): boolean => {
        return !connectionOpportunity.value
            || isSelectingOpportunity.value;
    });

    // #endregion

    // #region Functions

    /**
     * Updates the window query string to match the entity identifiers.
     */
    function updateUrl(): void {
        const qs: string[][] = [];

        if (connectionOpportunityId.value) {
            qs.push([PageParameterKey.ConnectionOpportunityId, connectionOpportunityId.value.toString()]);
        }

        if (connectionRequestId.value) {
            qs.push([PageParameterKey.ConnectionRequestId, connectionRequestId.value.toString()]);
        }

        if (campusId.value) {
            qs.push([PageParameterKey.CampusId, campusId.value.toString()]);
        }

        // Add in any query string parameters not related to us.
        for (const entry of new URLSearchParams(window.location.search).entries()) {
            if (![
                PageParameterKey.ConnectionOpportunityId,
                PageParameterKey.ConnectionRequestId,
                PageParameterKey.CampusId
            ].some(key => key.toLowerCase() === entry[0].toLowerCase())) {
                qs.push([entry[0], entry[1]]);
            }
        }

        // Update the URL in the window.
        if (qs.length) {
            const queryString = qs.map(q => `${q[0]}=${q[1]}`).join("&");
            window.history.replaceState(null, "", `${window.location.pathname}?${queryString}`);
        }
        else {
            window.history.replaceState(null, "", window.location.pathname);
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Handles the `opportunityChanged` event of the Toolbar component.
     *
     * @param connectionOpportunityId The identifier of the selected connection opportunity.
     */
    async function onOpportunityChanged(connectionOpportunityId: number): Promise<void> {
        isSelectingOpportunity.value = true;
        blockActionErrorMessage.value = "";

        const result = await invokeBlockAction<ConnectionRequestBoardSelectedOpportunityBag>("SelectConnectionOpportunity", { connectionOpportunityId });
        isSelectingOpportunity.value = false;

        if (!result.isSuccess) {
            blockActionErrorMessage.value = result.errorMessage || "Unknown error while trying to select connection opportunity.";
            return;
        }

        selectedOpportunity.value = result.data ?? null;
    }

    /**
     * Handles the `filtersChanged` event of the Toolbar component.
     *
     * @param filters The selected filters.
     */
    async function onFiltersChanged(filters: ConnectionRequestBoardFiltersBag): Promise<void> {
        console.log(JSON.stringify(filters));
    }

    // #endregion

    onConfigurationValuesChanged(reloadBlock);

    updateUrl();

    watch([
        connectionOpportunityId,
        connectionRequestId,
        campusId
    ], () => {
        updateUrl();
    });
</script>
