<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div class="panel-collapsible">
        <div class="panel-toolbar">

            <!-- Opportunities -->
            <div class="d-inline-block btn-group-mega">
                <button type="button" class="btn btn-xs btn-tool dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <i class="fa fa-plug"></i>
                    Opportunities
                </button>
                <ul class="dropdown-menu dropdown-menu-mega">

                    <!-- Favorite Opportunities -->
                    <template v-if="favoriteOpportunites.length">
                        <li class="dropdown-header">
                            <i class="far fa-star"></i>
                            Favorites
                        </li>
                        <li>
                            <a v-for="opportunity in favoriteOpportunites" :key="opportunity.guid ?? ''" href="#" @click.prevent="$emit('selectOpportunity', opportunity.guid)">
                                <i v-if="opportunity.iconCssClass" :class="opportunity.iconCssClass"></i>
                                {{ opportunity.publicName }}
                                <span class="pull-right text-muted small">
                                    {{ opportunity.connectionTypeName }}
                                </span>
                            </a>
                        </li>
                    </template>

                    <!-- All Opportunites, grouped by Connection Type -->
                    <template v-if="connectionTypes?.length">
                        <template v-for="connectionType in connectionTypes" :key="connectionType.guid ?? ''">
                            <li class="dropdown-header">
                                <i v-if="connectionType.iconCssClass" :class="connectionType.iconCssClass"></i>
                                {{ connectionType.name }}
                            </li>
                            <li v-for="opportunity in connectionType.connectionOpportunities" :key="`${connectionType.guid}-${opportunity.guid}`">
                                <a href="#" @click.prevent="$emit('selectOpportunity', opportunity.guid)">
                                    <i v-if="opportunity.iconCssClass" :class="opportunity.iconCssClass"></i>
                                    {{ opportunity.publicName }}
                                </a>
                            </li>
                        </template>
                    </template>
                    <li v-else class="disabled">
                        <a @click.prevent="$emit('selectOpportunity', null)">No Opportunities</a>
                    </li>

                </ul>
            </div>

            <div class="toolbar-group">

                <!-- Sort -->
                <div class="btn-group">
                    <button type="button" class="btn btn-xs btn-tool dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <i class="fa fa-sort"></i>
                        [Sort Text]
                    </button>
                    <ul class="dropdown-menu dropdown-menu-right">
                        <!-- No Sort -->
                        <li>&nbsp;</li>
                        <li>
                            <a>
                                [Sort Text]
                                &nbsp;
                                <small class="text-muted">[Sort Subtitle]</small>
                            </a>
                        </li>
                    </ul>
                </div>

                <!-- Connectors -->
                <div class="btn-group">
                    <button type="button" class="btn btn-xs btn-tool dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <i class="fa fa-user"></i>
                        [All Connectors]
                    </button>
                    <ul class="dropdown-menu">
                        <li>
                            <a>All Connectors</a>
                        </li>
                        <li>
                            <a>My Connections</a>
                        </li>
                        <li class="divider"></li>
                        <!-- Specific connectors for this Opportunity -->
                        <li>
                            <a>[Person 1 Name]</a>
                        </li>
                        <li>
                            <a>[Person 2 Name]</a>
                        </li>
                    </ul>
                </div>

                <!-- Campus -->
                <div class="btn-group">
                    <button type="button" class="btn btn-xs btn-tool dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <i class="fa fa-building"></i>
                        [Campus Name]
                    </button>
                    <ul class="dropdown-menu">
                        <!-- All Campuses -->
                        <li>&nbsp;</li>
                        <li>
                            <a>
                                [Campus 1]
                            </a>
                        </li>
                        <li>
                            <a>
                                [Campus 2]
                            </a>
                        </li>
                    </ul>
                </div>

                <!-- Filters -->
                <a class="btn btn-xs btn-tool">
                    <i class="fa fa-filter"></i>
                    Filters
                </a>

            </div>
        </div>
    </div>
</template>

<script setup lang="ts">
    import { computed, PropType } from "vue";
    import { ConnectionRequestBoardConnectionOpportunityBag } from "@Obsidian/ViewModels/Blocks/Connection/ConnectionRequestBoard/connectionRequestBoardConnectionOpportunityBag";
    import { ConnectionRequestBoardConnectionTypeBag } from "@Obsidian/ViewModels/Blocks/Connection/ConnectionRequestBoard/connectionRequestBoardConnectionTypeBag";

    const props = defineProps({
        connectionTypes: {
            type: Array as PropType<ConnectionRequestBoardConnectionTypeBag[] | null | undefined>,
            required: true
        }
    });

    defineEmits<{
        (e: "selectOpportunity", opportunityGuid: string | null | undefined): void
    }>();

    // #region Computed Values

    const favoriteOpportunites = computed((): ConnectionRequestBoardConnectionOpportunityBag[] => {
        const opportunities: ConnectionRequestBoardConnectionOpportunityBag[] = [];

        (props.connectionTypes ?? []).forEach((connectionType: ConnectionRequestBoardConnectionTypeBag) => {
            (connectionType.connectionOpportunities ?? [])
                .filter((opportunity: ConnectionRequestBoardConnectionOpportunityBag) => opportunity.isFavorite)
                .forEach((opportunity: ConnectionRequestBoardConnectionOpportunityBag) => opportunities.push(opportunity));
        });

        return opportunities;
    });

    // #endregion
</script>
